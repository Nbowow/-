pipeline {
    agent any


    environment {
        BACKEND_DIR = './social_service'
        DOCKER_IMAGE_BACKEND = 'parkgc0504/social-service:latest'
        GITLAB_CREDENTIALSID = 'gichangssafy'
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials'
        SSH_CREDENTIALS = 'EC2_SSH'
        EC2_SERVER_IP = '13.209.82.34'  // 대상 EC2 서버의 IP 주소
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: GITLAB_CREDENTIALSID, branch: 'develop', url: 'https://lab.ssafy.com/s11-bigdata-dist-sub1/S11P21C206.git'
            }
        }
        stage('Notify Start') {
            steps {
                script {
                    def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                    mattermostSend(
                        color: 'warning',
                        message: "social-service 빌드 시작: ${env.JOB_NAME} #${env.BUILD_NUMBER} \n(<${env.BUILD_URL}|Details>)",
                        endpoint: 'https://meeting.ssafy.com/hooks/rqoymdqdtjr4dqhkai1gmnnunh',
                        channel: 'C206_deploy'
                    )
                }
            }
        }

        stage('Build social-service') {
            when {
                changeset "social_service/**"  // backend 폴더에 변경 사항이 있을 때만 실행
            }
            steps {
                dir(BACKEND_DIR) {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build'
                }
            }
        }

        stage('Docker Build and Push social_service to DockerHub') {
            when {
                changeset "social_service/**"  // backend 폴더에 변경 사항이 있을 때만 실행
            }
            steps {
                dir(BACKEND_DIR) {
                    script {
                        docker.withRegistry('https://registry.hub.docker.com', DOCKERHUB_CREDENTIALS) {
                            def backendImage = docker.build(DOCKER_IMAGE_BACKEND)
                            backendImage.push()
                        }
                    }
                }
            }
        }

        stage('Deploy Backend on Another EC2') {
             when {
                   changeset "social_service/**"  // backend 폴더에 변경 사항이 있을 때만 실행
             }
            steps {
                script {
                    sshagent (credentials: [SSH_CREDENTIALS]) {
                        withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                            sh '''
                            ssh -o StrictHostKeyChecking=no ubuntu@${EC2_SERVER_IP} "
                                docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD} &&
                                docker pull ${DOCKER_IMAGE_BACKEND} &&
                                docker stop social-service || true &&
                                docker rm social-service || true &&
                                docker run -d -p 8081:8081 --network backend \
                                --name social-service \
                                -e "eureka.client.serviceUrl.defaultZone=http://j11c206.p.ssafy.io:8761/eureka" \
                                -e "spring.rabbitmq.host=j11c206.p.ssafy.io" \
                                -e "logging.file=/api-logs/social-ws.log" \
                                parkgc0504/social-service:latest
                            "
                            '''
                        }
                    }
                }
            }
        }
    }


     post {
        success {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend(color: 'good',
                    message: "social_service 빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}\n(<${env.BUILD_URL}|Details>)",
                    endpoint: 'https://meeting.ssafy.com/hooks/rqoymdqdtjr4dqhkai1gmnnunh',
                    channel: 'C206_deploy'
                )
            }
        }
        failure {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend(color: 'danger',
                    message: "social_service 빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}\n(<${env.BUILD_URL}|Details>)",
                    endpoint: 'https://meeting.ssafy.com/hooks/rqoymdqdtjr4dqhkai1gmnnunh',
                    channel: 'C206_deploy'
                )
            }
        }
    }
}
